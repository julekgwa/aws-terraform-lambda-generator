aws:
  region: us-east-2

help: >
  create-aws-tf-lambda generates AWS lambda with terraform script


  usage:
    create-aws-tf-lambda [-n], [-a], [-h], [-o]

    commands can be:

    -n,  --new <project>:      used to create a new project
    -a,  --add  <lambda>:      used to add a new lambda. Use -a sfn to add a step function
    -h,           --help:      used to print the usage guide
    -o,            --org:      used to move all your lambdas to one project [mono project]

project:
  directory: packages
  babelConfig: >
    {
      "presets": [
        [
          "@babel/preset-env",
          {
            "targets": {
              "node": "12",
              "esmodules": true
            }
          }
        ]
      ],
        "plugins": [
        [
          "@babel/plugin-transform-runtime",
          {
            "corejs": 3
          }
        ]
      ]
    }
  lambda: >
    export async function :lambda_name (event) {
      console.log('Loading function', event)
    }
  lambdaTest: >
    import { :lambda_name } from '../src/handlers'

    describe('Given handler', () => {
      test('should expose the lambda function handler', () => {
        expect(typeof :lambda_name).toBe('function')
      })
    })
  projectPackageJson: >
    {
      "name": ":package_name",
      "version": "1.0.0",
      "description": "",
      "main": "app.js",
      "scripts": {
        "start": "node app.js",
        "test": "jest"
      },
      "keywords": [],
      "author": "",
      "license": "ISC"
    }
  lambdaPackageJson: >
    {
      "name": ":package_name",
      "version": "1.0.0",
      "description": "",
      "main": "app.js",
      "scripts": {
        "start": "node app.js",
        "test": "jest"
      },
      "keywords": [],
      "author": "",
      "license": "ISC"
    }
terraform:
  aws_s3_bucket_object: >
    #resource "aws_s3_bucket_object" ":lambda_name_file_upload" {
    #  bucket = aws_s3_bucket.lambda_fn_upload.id
    #  key    = "lambda-fns/:package_name/function.zip"
    #  source = "../:package_name/function.zip"
    #  etag = filemd5("../:package_name/function.zip")
    #}
  aws_s3_bucket: >
    #resource "aws_s3_bucket" "lambda_fn_upload" {
    #    bucket = var.bucket
    #    acl = "private"
    #}
  aws_sfn_state_machine: >
    resource "aws_sfn_state_machine" "sfn_state_machine" {
      name     = "sfn_state_machine"
      role_arn = aws_iam_role.sfn_execution.arn

      :definition
    }
  aws_iam_role_policy_attachment_sfn: >
    resource "aws_iam_role_policy_attachment" "sfn_lambda_invoke" {
        role       = "${aws_iam_role.sfn_execution.name}"
        policy_arn = "${aws_iam_policy.sfn_lambda_invoke.arn}"
    }
  aws_iam_policy_sfn: >
    resource "aws_iam_policy" "sfn_lambda_invoke" {
        name = "sfn_lambda_invoke"
        policy = "${data.aws_iam_policy_document.sfn_lambda_invoke.json}"
    }
  aws_iam_policy_document_sfn: >
    data "aws_iam_policy_document" "sfn_lambda_invoke" {
        statement {
            actions = ["lambda:InvokeFunction"]
            resources = ["arn:aws:lambda:*:*:*"]
        }
    }
  aws_iam_policy_document: >
    data "aws_iam_policy_document" "sfn_assume_role" {
      statement {
        actions = ["sts:AssumeRole"]

        principals {
          type = "Service"
          identifiers = ["states.${var.aws_region}.amazonaws.com"]
        }
      }
    }
  aws_iam_role_policy_attachment: >
    resource "aws_iam_role_policy_attachment" "lambda_fn_policy_logs" {
      role       = aws_iam_role.lambda_fn_role.name
      policy_arn = aws_iam_policy.lambda_fn_logging.arn
    }
  aws_iam_policy: >
    resource "aws_iam_policy" "lambda_fn_logging" {
      name        = "lambda_fn_logging"
      path        = "/"
      description = "IAM policy for logging from a lambda"

      policy = jsonencode({
        "Version": "2012-10-17",
        "Statement": [
          {
            "Action": [
              "logs:CreateLogGroup",
              "logs:CreateLogStream",
              "logs:PutLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:*",
            "Effect": "Allow"
          }
        ]
      })
    }
  aws_cloudwatch_log_group: >
    resource "aws_cloudwatch_log_group" ":lambda_name_logs" {
      name              = "/aws/lambda/:lambda_name"
      retention_in_days = 0
    }
  aws_iam_role_sfn: >
    resource "aws_iam_role" "sfn_execution" {
      name = "sfn_execution"
      assume_role_policy = "${data.aws_iam_policy_document.sfn_assume_role.json}"
    }
  aws_iam_role: >
    resource "aws_iam_role" "lambda_fn_role" {
      name = "lambda_fn_role"

      assume_role_policy = jsonencode({
        "Version" : "2012-10-17",
        "Statement" : [
          {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : "lambda.amazonaws.com"
            },
            "Action" : "sts:AssumeRole"
          }
        ]
      })

    }
  aws_lambda_function: >
    resource "aws_lambda_function" ":lambda_name" {
      # For files larger than 10 MB, consider uploading using Amazon S3.
      # s3_bucket         = "aws_s3_bucket.lambda_fn_upload.id
      # s3_key            = "lambda-fns/:package_name/function.zip"
      filename      = ":source_directory:package_name/function.zip"
      function_name = ":package_name"
      role          = aws_iam_role.lambda_fn_role.arn
      handler       = "dist/handlers.:package_name"

      source_code_hash = filebase64sha256(":source_directory:package_name/function.zip")

      runtime = "nodejs12.x"
    }
  archive: >
    data "archive_file" ":lambda_name" {
      type = "zip"

      source_dir  = "${path.module}/:package_name"
      output_path = "${path.module}/:package_name.zip"
    }
  provider: >
    provider "aws" {
      region     = var.aws_region
    }
  variables: >
    #variable "bucket" {
    #  type = string
    #  default = "lambda-fn-upload" # should be unique
    #}

    variable "aws_region" {
      type    = string
      default = ":region"
    }
monoJson: >
  {
    "packageDir": "packages",
    "componentDir": "components",
    "strictMode": true,
    "packages": {}
  }

gitignore: >
    # Logs
    logs
    *.log
    npm-debug.log*
    yarn-debug.log*
    yarn-error.log*
    lerna-debug.log*
    .pnpm-debug.log*

    # Diagnostic reports (https://nodejs.org/api/report.html)
    report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

    # Runtime data
    pids
    *.pid
    *.seed
    *.pid.lock

    # Directory for instrumented libs generated by jscoverage/JSCover
    lib-cov

    # Coverage directory used by tools like istanbul
    coverage
    *.lcov

    # nyc test coverage
    .nyc_output

    # Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
    .grunt

    # Bower dependency directory (https://bower.io/)
    bower_components

    # node-waf configuration
    .lock-wscript

    # Compiled binary addons (https://nodejs.org/api/addons.html)
    build/Release

    # Dependency directories
    node_modules/
    jspm_packages/

    # Snowpack dependency directory (https://snowpack.dev/)
    web_modules/

    # TypeScript cache
    *.tsbuildinfo

    # Optional npm cache directory
    .npm

    # Optional eslint cache
    .eslintcache

    # Optional stylelint cache
    .stylelintcache

    # Microbundle cache
    .rpt2_cache/
    .rts2_cache_cjs/
    .rts2_cache_es/
    .rts2_cache_umd/

    # Optional REPL history
    .node_repl_history

    # Output of 'npm pack'
    *.tgz

    # Yarn Integrity file
    .yarn-integrity

    # dotenv environment variables file
    .env.development.local
    .env.test.local
    .env.production.local
    .env.local

    # parcel-bundler cache (https://parceljs.org/)
    .cache
    .parcel-cache

    # Next.js build output
    .next
    out

    # Nuxt.js build / generate output
    .nuxt
    dist

    # Gatsby files
    .cache/
    # Comment in the public line in if your project uses Gatsby and not Next.js
    # https://nextjs.org/blog/next-9-1#public-directory-support
    # public

    # vuepress build output
    .vuepress/dist

    # vuepress v2.x temp and cache directory
    .temp
    .cache

    # Serverless directories
    .serverless/

    # FuseBox cache
    .fusebox/

    # DynamoDB Local files
    .dynamodb/

    # TernJS port file
    .tern-port

    # Stores VSCode versions used for testing VSCode extensions
    .vscode-test

    # yarn v2
    .yarn/cache
    .yarn/unplugged
    .yarn/build-state.yml
    .yarn/install-state.gz
    .pnp.*